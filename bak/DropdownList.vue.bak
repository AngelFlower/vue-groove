<template>
  <transition name="dropdown">
    <div v-if="show" class="DropdownList" :style="{'left':x+'px','top':y-30+'px'}" ref="dropDown">
      <ul>
        <slot></slot>
      </ul>
    </div>
  </transition>
</template>

<script lang="ts">
  import {Component, Prop, Vue, Watch} from "vue-property-decorator";

  @Component({
/*    props: {
      show: Boolean,
      x: Number,
      y: Number
    },*/
  })
  export default class DropdownList extends Vue {
    @Prop(Boolean) show
    @Prop(Number) x
    @Prop(Number) y


    @Watch('show')
    onShowChanged(val) {

      const isInSelf = function (node,target) {
        if (node===target){
          return true
        }
        if (node.parentNode) {
          return isInSelf(node.parentNode,target)
        }else{
          return false
        }
      }

      const that = this
      const hideList = function (e) {

        // if (e.target.className.indexOf('Dropdown')===-1) {

        if (!isInSelf(e.target, that.$refs.dropDown)) {
          e.stopPropagation()
        }

        document.removeEventListener('click', hideList, true)
        document.removeEventListener('contextmenu', hideList, true)
        e.preventDefault()
        // }
        that.$emit('hide')
      }
      if (val) {
        setTimeout(() => {
          var dropDown = <HTMLElement> this.$refs.dropDown
          var parent = dropDown.parentNode
          parent.removeChild(dropDown)
          document.body.appendChild(dropDown)
        }, 1)
        document.addEventListener('click', hideList, true)
        document.addEventListener('contextmenu', hideList, true)
      }
    }
  }
</script>

<style scoped lang="scss">


  .DropdownList {
    background-color: #eee;
    border: 1px solid #999;
    position: absolute;
    color: #000;
    overflow: hidden;
    ul {
      transition: all .3s;
      width: 100%;
      padding: 10px 0;
      li {

      }
    }
  }
</style>
<style lang="scss">
  .DropdownListItem {
    width: 100%;
    text-align: left;
    padding: 6px 12px;
    font-size: 16px;
    &:hover {
      background-color: #ccc;
    }
    &.split {
      margin: 5px 0;
      width: 100%;
      height: 1px;
      background-color: #ccc;
      padding: 0;
    }
  }
</style>


<style lang="scss">
  .dropdown-enter-active, .dropdown-leave-active {
    transition: all .3s;
  }

  .dropdown-enter {
    /*    &>ul {
          transform: translateY(-100%)!important;
        }*/
    opacity: 0;
  }

  .dropdown-leave-to {
    opacity: 0;
  }
</style>