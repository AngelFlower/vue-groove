import {File} from "@/store/modules/file";
// @ts-ignore
import config from '@/utils/config';

function _initCoverUrl(arr: Array<File>, path: Array<string>) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].content) {
      _initCoverUrl(arr[i].content||[], path.concat([arr[i].title]))
    } else {
      const imgUrl = `${config.coverPath}${path.join('/')}/${arr[i].title}.jpg`
      const musicUrl = `${config.musicPath}${path.join('/')}/${arr[i].title}.mp3`

      arr[i].imgUrl = imgUrl
      arr[i].musicUrl = musicUrl

    }
  }
}
export function initResourceUrl(arr: Array<File>) {
  console.log(arr);
  _initCoverUrl(arr,[])
}

 function _convertFilesToLinearArray(arr: Array<File>,tmp:Array<File>) {
   for (let i = 0; i < arr.length; i++) {
     if(arr[i].content){
       _convertFilesToLinearArray(arr[i].content||[],tmp)
     }else {
       tmp.push(arr[i])
     }
   }
}

export function convertFilesToLinearArray(arr: Array<File>) {
  let tmp:Array<File> = []
  _convertFilesToLinearArray(arr,tmp)
  return tmp
}

/**
 *
 * @param node 事件的node
 * @param target 要判断的组件自身
 * @returns {boolean}
 */
export function isInSelf (node:HTMLElement,target:HTMLElement):boolean {
  if (node===target){
    return true
  }
  if (node.parentNode) {
    return isInSelf(<HTMLElement>node.parentNode,target)
  }else{
    return false
  }
}


export function uuid() :string{
  var s:Array<string> = [];
  var hexDigits = "0123456789abcdef";
  for (var i = 0; i < 36; i++) {
    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
  }
  s[14] = "4";  // bits 12-15 of the time_hi_and_version field to 0010
  s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01
  s[8] = s[13] = s[18] = s[23] = "-";

  var uuid = s.join("");
  return uuid;
}