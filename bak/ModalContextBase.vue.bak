<template>
  <div class="ModalContextBase" v-if="show" :style="{'left':x+'px','top':y-30+'px'}" ref="ModalContextBase">
    <slot>

    </slot>
  </div>
</template>

<script lang="ts">
  import {Component, Prop, Vue, Watch} from "vue-property-decorator";
  import {State, Mutation, Action} from 'vuex-class'

  @Component({
/*    props: {
      show: Boolean,
      clickSelfHide: Boolean,
      mouse: String,
      x: Number,
      y: Number
    }*/
  })
  export default class ModalContextBase extends Vue {
    @Prop(Boolean) show
    @Prop(Boolean) clickSelfHide
    @Prop(String) mouse
    @Prop(Number) x
    @Prop(Number) y

    @Watch('show')
    onShowChanged(val) {
      const that = this

      /**
       *
       * @param node 事件的node
       * @param target 要判断的组件自身
       * @returns {boolean}
       */
      const isInSelf = function (node,target) {
        if (node===target){
          return true
        }
        if (node.parentNode) {
          return isInSelf(node.parentNode,target)
        }else{
          return false
        }
      }

      const hideList = function (e) {
        console.log(e);
        document.removeEventListener('click', hideList, true)
        document.removeEventListener('contextmenu', hideList, true)

        if (e.type === 'click') {
          e.stopPropagation()
          e.preventDefault()
        }

        if (this.clickSelfHide) {
          that.$emit('hide')
        }else{

          if (!isInSelf(e.target, that.$refs.ModalContextBase)) {
            that.$emit('hide')
          }
        }
      }



      if (val) {
        setTimeout(() => {
          var base = <HTMLElement> this.$refs.ModalContextBase
          var parent = base.parentNode

          parent.removeChild(base)
          document.body.appendChild(base)

        }, 1)
        document.addEventListener('click', hideList, true)

        document.addEventListener('contextmenu', hideList, true)
      }
    }

  }
</script>

<style scoped lang="scss">
  .ModalContextBase {
    position: absolute;
  }
</style>