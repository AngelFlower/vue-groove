<template>
  <div class="item FileItem" @click="handleSelect">
    <div class="cover">
      <!--<img :src="item.imgUrl?item.imgUrl:'/cd.png'" @click="$store.dispatch('file/handleSelect',item)">-->
      <img :src="item.imgUrl" v-if="item.imgUrl">
      <div class="dir-icon" v-if="!item.imgUrl">
        <img src="/cd.png">
      </div>
      <div class="operation">
        <div class="play" @click="play">
          <Icon type="ios-play-outline"/>
        </div>
        <div class="add" @click="showDropDown">
          <Icon type="ios-add"/>
        </div>
      </div>
    </div>
    <h5 :class="{'bold':item.imgUrl}">{{item.title}}</h5>
    <p class="artist">{{item.p?item.p:''}}</p>
  </div>
</template>

<script lang="ts">
  import {Component, Prop, Vue} from "vue-property-decorator";
  import DropdownList from "@/components/DropdownList.vue";
  import {dropDownMenu, editPlayListModal, fadeInFileContent} from "../utils/utils";
  import {namespace} from "vuex-class";

  const playListModule = namespace("playList");

  @Component({
    components: {
      DropdownList
    }
  })
  export default class FileItem extends Vue {

    @Prop(Object) item;
    @Prop(Array) all;
    @Prop(Boolean) isAddToRecent;
    @playListModule.State playLists;
    @playListModule.State playingList;

    showCreatePlayListModal() {
      editPlayListModal({isRename: false}).then(name => {
        if (this.item.content) {
          let allFile = this.getAllFileByContent(this.item.content);
          this.$store.dispatch("playList/createPlayList", {name, fileIds: allFile.map(o => o.id)});
        } else {
          this.$store.dispatch("playList/createPlayList", {name, fileIds: [this.item.id]});
        }
      });
    }

    showDropDown(e) {
      e.stopPropagation();
      const contextMenu: any = [];

      contextMenu.push({
        label: "添加到'正在播放'", callback: () => {
          if (this.item.content) {
            let allFile = this.getAllFileByContent(this.item.content);
            this.$store.dispatch("playList/addToPlayingList", allFile);

          } else {
            this.$store.dispatch("playList/addToPlayingList", [this.item]);
          }
        }
      });

      contextMenu.push({split: true});
      contextMenu.push({label: "新的播放列表", callback: this.showCreatePlayListModal});


      if (this.playLists.length > 0) {
        this.playLists.forEach(o => {
          if (this.item.content) {
            contextMenu.push({
              label: o.title,
              callback: () => {
                let allFile = this.getAllFileByContent(this.item.content);
                this.$store.dispatch("playList/addToPlayList", {listId: o.id, ids: allFile.map(o => o.id)});
              }
            });
            console.log(JSON.parse(JSON.stringify(contextMenu)));
          } else {
            contextMenu.push({
              label: o.title,
              callback: () => {this.$store.dispatch("playList/addToPlayList", {listId: o.id, ids: [this.item.id]})}
            });
            console.log("error");
          }
        });
      }
      console.log(JSON.parse(JSON.stringify(contextMenu)));

      dropDownMenu(e, contextMenu);
    }

    private getAllFileByContent(content) {
      let tmp = [];

      function pushItem(content) {
        for (let i = 0; i < content.length; i++) {
          if (content[i].content) {
            pushItem(content[i].content);
          } else {
            tmp.push(content[i]);
          }
        }
      }

      pushItem(content);
      return tmp;
    }

    play(e) {
      e.stopPropagation();
      this.$store.dispatch("audio/play", this.item);
      if (this.all && !this.item.content) {
        this.$store.commit("playList/setPlayingList", this.all);
      }

      if (this.item.content) {

        let allFile = this.getAllFileByContent(this.item.content);

        this.$store.dispatch("audio/play", allFile[0]);
        this.$store.commit("playList/setPlayingList", allFile);
      }

      // var isRecent = !this.$store.state.file.isDir
      if (this.isAddToRecent) {
        this.$store.dispatch("playList/addRecentPlay", this.item);
      }
    }

    handleSelect(e) {
      if (this.item.content) {
        this.$store.commit("file/setPath", this.item.title);
        fadeInFileContent();
      } else {
        this.play(e);
      }
    }
  }
</script>

<style scoped lang="scss">
  .FileItem {
    width: 160px;
    height: 200px;
    position: relative;

    &:hover {

      .cover{
        box-shadow: rgba(0,0,0,.2) 0 20px 40px;
      }

      .operation div {

        opacity: 1;
        width: 50px;
        height: 50px;
      }
    }

    .operation {
      position: absolute;
      top: 0;
      bottom: 0;
      height: 80px;
      width: 100%;
      margin: auto;
      /*              display: flex;
                    align-items: center;
                    justify-content: center;*/
      .play, .add {
        border-radius: 50%;
        background-color: rgba(0, 0, 0, .8);
        color: #fff;
        font-size: 28px;
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        width: 40px;
        height: 40px;
        margin: auto;
        transition: all .3s;
        top: 0;
        bottom: 0;
        opacity: 0;
        &:hover {
          height: 60px;
          width: 60px;
        }
      }
      .play {
        left: 0;
        right: 40%;
      }
      .add {
        left: 40%;
        right: 0;
      }
    }
    .cover {
      transition: box-shadow .3s;

      position: relative;
      width: 160px;
      height: 160px;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: #eee;
      img {
        width: 100%;
        height: 100%;
      }
      .dir-icon {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        img {
          width: 30%;
          height: 30%;
        }
      }
    }
    h5 {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
      margin-top: 5px;
      margin-bottom: 0;
      font-size: 16px;
      font-weight: normal;

      &.bold {
        font-weight: bold;
      }
    }
    .artist {
      font-size: 12px;
      color: #555;
      line-height: 5px;
      margin-top: 5px;
    }

  }
</style>